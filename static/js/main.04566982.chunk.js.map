{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","todosToFilter","title","toLowerCase","includes","completed","length","className","map","id","onClick","TodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","value","target","filterActions","placeholder","trim","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","loadUser","a","userId","userFromServer","useEffect","todoActions","href","email","name","App","loadTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04566982.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/STATUS',\n  payload: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = { query: string, status: Status };\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = { todos: Todo[] };\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = { todos: [] },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as TodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const filteredTodos = useMemo(() => {\n    const todosToFilter = todos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n    switch (status) {\n      case 'active':\n        return todosToFilter.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todosToFilter.filter(todo => todo.completed);\n\n      default:\n        return todosToFilter;\n    }\n  }, [todos, query, status]);\n\n  return (\n    <>\n      {(todos.length && !filteredTodos.length) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(TodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${currentTodo?.id === todo.id\n                      ? 'fa-eye-slash'\n                      : 'fa-eye'}`}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatus = (value: string) => {\n    dispatch(filterActions.setStatus(value as Status));\n  };\n\n  const handleQuery = (value: string) => {\n    dispatch(filterActions.setQuery(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => handleStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value.trim())}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.trim().length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = async () => {\n    setIsLoading(true);\n    try {\n      if (currentTodo) {\n        const userFromServer = await getUser(currentTodo.userId);\n\n        setUser(userFromServer);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                aria-label=\"remove\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(todoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed === true\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}